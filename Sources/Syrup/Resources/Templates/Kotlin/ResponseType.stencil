{% if asFile %}
package {% if moduleName %}{{ moduleName }}{% else %}com.shopify.syrup{% endif %}.{{ package }}

{{ header }}
{% if importEnums %}import {% if moduleName %}{{ moduleName }}{% else %}com.shopify.syrup{% endif %}.enums.*{% endif %}
{% if containsFragment and not fragmentDefinition %}import {% if moduleName %}{{ moduleName }}{% else %}com.shopify.syrup{% endif %}.fragments.*{% endif %}
import java.math.BigDecimal
import org.joda.time.DateTime
import com.google.gson.JsonObject
import javax.annotation.Generated

@Generated("{% if moduleName %}{{ moduleName }}{% else %}com.shopify.syrup{% endif %}")
{% endif %}
data class {{ name }}(
    {% for field in fields %}
    {% with field.attributes as attributes %}{% include "Helpers/Attributes.stencil" %}{% endwith %}
    val {{ field|renderPropertyDeclaration }}{% if fragmentNames or not forloop.last %},{% endif %}
    {% endfor %}
    {% for fragmentName in fragmentNames %}
    val {{ fragmentName|lowercasedFirstLetter }}: {% if moduleName %}{{ moduleName }}{% else %}com.shopify.syrup{% endif %}.fragments.{{ fragmentName }}{% if not forloop.last %},{% endif %}
    {% endfor %}
) : {% if superclassOverride %}{{ superclassOverride }}{% else %}Response{% endif %} {
    constructor(jsonObject: JsonObject) : this(
        {% for field in fields %}
        {{ field|decodeField }}{% if fragmentNames or not forloop.last %},{% endif %}
        {% endfor %}
        {% for fragmentName in fragmentNames %}
        {{ fragmentName|lowercasedFirstLetter }} = {% if moduleName %}{{ moduleName }}{% else %}com.shopify.syrup{% endif %}.fragments.{{ fragmentName }}(jsonObject){% if not forloop.last %},{% endif %}
        {% endfor %}
    )

    {% if fragmentSelections %}
    companion object {
        fun getSelections(operationVariables: Map<String, String>): List<Selection> {
            return {{ fragmentSelections|renderKotlinSelections:graphQLName }}
        }
    }
    {% endif %}

    {% for field in fields %}
    {{ field|nestedTypeDefinition }}
    {% endfor %}

    {% for field in fields %}
  {{ field|nestedInterfaceWrapper }}
    {% endfor %}
  
  {% for field in fields %}
  {{ field|nestedUnionWrapper }}
    {% endfor %}
}
