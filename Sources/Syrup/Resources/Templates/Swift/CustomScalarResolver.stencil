{% extends "Base.stencil" %}
{% block content %}
{% if not asFile %}public {% endif %}class CustomScalarResolver: BaseCustomScalarResolver {
	{% for scalar in scalars %}
		public let decoderFor{{ scalar.graphType }}: ({{ scalar.rawValueType }}, [CodingKey]) throws -> {{ scalar.nativeType }}
		public let encoderFor{{ scalar.graphType }}: ({{ scalar.nativeType }}, [CodingKey]) throws -> {{ scalar.rawValueType }}
	{% endfor %}


	init({{ scalars|renderResolverArguments }}) {
		{% for scalar in scalars %}
			self.decoderFor{{ scalar.graphType }} = { rawValue, codingPath in
				try {{ moduleName }}.CustomScalarResolver.performDecode(resolver: decoderFor{{ scalar.graphType }}, rawValue: rawValue, codingPath: codingPath)
			}
			self.encoderFor{{ scalar.graphType }} = { value, codingPath in
				try {{ moduleName }}.CustomScalarResolver.performEncode(resolver: encoderFor{{ scalar.graphType }}, value: value, codingPath: codingPath)
			}
		{% endfor %}
		super.init()
	}

	private static func performDecode<T, R>(resolver: (R) throws -> T, rawValue: R, codingPath: [CodingKey]) throws -> T {
		do {
			return try resolver(rawValue)
		} catch is ResolverError {
			throw DecodingError.valueNotFound(T.self, DecodingError.Context(codingPath: codingPath, debugDescription: "Expected to find value for \(T.self), found nil instead."))
		}
	}

	private static func performEncode<T, R>(resolver: (T) throws -> R, value: T, codingPath: [CodingKey]) throws -> R {
		do {
			return try resolver(value)
		} catch is ResolverError {
			throw EncodingError.invalidValue(value, EncodingError.Context(codingPath: codingPath, debugDescription: "Unable to encode custom value \(value) to type \(T.self)"))
		}
	}
}
{% endblock %}

{{ supportFilesHeader }}
import Foundation


