{% extends "Base.stencil" %}

{% block content %}
	{% if not asFile %}{{ accessLevel }} {% endif %}struct {{ operation|renderClassName }}: GraphApiQuery, ResponseAssociable, Equatable {
		// MARK: - Query Variables
		{% for variable in operation.variables %}
			{{ accessLevel }} let {{ variable.name|escapeReservedWord }}: {{ variable.type|renderVariableType }}
		{% endfor %}

		// MARK: - Initializer
		{{ accessLevel }} init({{ operation.variables|renderArguments }}) {
			{% for field in operation.variables %}
				self.{{ field.name|escapeReservedWord }} = {{ field.name|escapeReservedWord }}
			{% endfor %}
		}

		// MARK: - Helpers

		public static let customEncoder: JSONEncoder = {{ moduleName }}.customEncoder

		private enum CodingKeys: CodingKey {
			{% for variable in operation.variables %}
				case {{ variable.name|escapeReservedWord }}
			{% endfor %}
		}

		{% if requiresCustomEncoder %}
			{{ accessLevel }} func encode(to encoder: Encoder) throws {
				let customScalarResolver = {{ moduleName }}.customScalarResolver
				var container = encoder.container(keyedBy: CodingKeys.self)
				{% for variable in operation.variables %}
					{% if variable|requiresCustomCoder %}
						try customScalarResolver.encode({{ variable.name|escapeReservedWord }}, rawValueType: {{ variable|nestedRawValueType }}.self, forKey: .{{ variable.name|escapeReservedWord }}, container: &container) { [codingPath = container.codingPath] (value) -> {{ variable|nestedRawValueType }} in
							return try customScalarResolver.encoderFor{{ variable|nestedGraphType }}(value, codingPath)
						}
					{% else %}
						try container.encode({{ variable.name|escapeReservedWord }}, forKey: .{{ variable.name|escapeReservedWord }})
					{% endif %}
				{% endfor %}
			}
		{% endif %}

		{{ accessLevel }} typealias Response = {{ operation.name }}Response

		{{ accessLevel }} let queryString: String = """
		{{ queryString }}
		"""
	}
{% endblock %}
